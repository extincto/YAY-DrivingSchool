<Page x:Class="WpfDrivingSchool.Moniteur"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WpfDrivingSchool"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="600" d:DesignWidth="600"
      Title="Moniteur" Background="White">

    <Grid>
        <DataGrid HorizontalAlignment="Center" Margin="10,142,10,186" Width="580" RenderTransformOrigin="0.504,0.5">
            <DataGrid.Columns>
                <DataGridCheckBoxColumn
			Binding="{Binding IsSelected}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}"
			ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}">
                    <DataGridCheckBoxColumn.Header>

                        <Border
					Padding="6,0,6,0"
					HorizontalAlignment="Center"
					Background="Transparent">
                            <CheckBox
						HorizontalAlignment="Center"
						DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}"
						IsChecked="{Binding IsAllItems3Selected}" />
                        </Border>
                    </DataGridCheckBoxColumn.Header>
                </DataGridCheckBoxColumn>
                <DataGridTextColumn
			Binding="{Binding Id}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
			Header="Id" />
                <!--  if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn  -->
                <materialDesign:MaterialDataGridTextColumn
			Binding="{Binding Nom}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
			Header="Nom" />
                <!--  set a max length to get an indicator in the editor  -->
                <materialDesign:MaterialDataGridTextColumn
			Binding="{Binding Prenom}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
			Header="Prenom"
			MaxLength="255" />
                <materialDesign:MaterialDataGridTextColumn
			Binding="{Binding Adresse}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
			Header="Adresse"
                    MaxLength="100">
                    <DataGridTextColumn.HeaderStyle>
                        <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.HeaderStyle>
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </materialDesign:MaterialDataGridTextColumn>
                <!--  use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo  -->
                <materialDesign:MaterialDataGridComboBoxColumn
			Header="Date de naissance"
			ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}"
			SelectedValueBinding="{Binding DDN}" />
                <materialDesign:MaterialDataGridTextColumn
			Binding="{Binding Email}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                    Header="Email"/>
                <materialDesign:MaterialDataGridTextColumn
			Binding="{Binding Ville}"
			EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
			Header="VIlle" />
            </DataGrid.Columns>
        </DataGrid>

        <materialDesign:DialogHost
	
	 Margin="0,10,0,0">
            <materialDesign:DialogHost.DialogContent>
                <StackPanel  Margin="16">
                    <TextBlock>Ajouter un nouveau client</TextBlock>
                    <TextBox
				x:Name="FruitTextBox"
				Margin="0,8,0,0"
				HorizontalAlignment="Stretch" />
                    <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                        <Button
					Margin="0,8,8,0"
					Command="materialDesign:DialogHost.CloseDialogCommand"
					IsDefault="True"
					Style="{StaticResource MaterialDesignFlatButton}">
                            <Button.CommandParameter>
                                <system:Boolean xmlns:system="clr-namespace:System;assembly=mscorlib">True</system:Boolean>
                            </Button.CommandParameter>
                            ACCEPT
                        </Button>
                        <Button
					Margin="0,8,8,0"
					Command="materialDesign:DialogHost.CloseDialogCommand"
					IsCancel="True"
					Style="{StaticResource MaterialDesignFlatButton}">
                            <Button.CommandParameter>
                                <system:Boolean xmlns:system="clr-namespace:System;assembly=mscorlib">False</system:Boolean>
                            </Button.CommandParameter>
                            CANCEL
                        </Button>
                    </StackPanel>
                </StackPanel>
            </materialDesign:DialogHost.DialogContent>

            <Grid Margin="69,31,-69,-31">
                <Grid.RowDefinitions>
                    <RowDefinition Height="79*" />
                    <RowDefinition Height="151*"/>
                    <RowDefinition Height="Auto" MinHeight="24" />
                </Grid.RowDefinitions>
                <Button
				Margin="0,0,90,139"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Command="{x:Static materialDesign:DialogHost.OpenDialogCommand}" Width="54" Grid.Row="1"
				>
                    <Viewbox Width="22" Height="22">
                        <Canvas Width="24" Height="24">
                            <Path Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button}, Path=Foreground}" />
                        </Canvas>
                    </Viewbox>
                </Button>
            </Grid>

        </materialDesign:DialogHost>
    </Grid>
</Page>
